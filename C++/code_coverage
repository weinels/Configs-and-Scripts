#!/bin/bash
# Written by Adam Wilson January 2014
# This is an interactive script to make viewing gcov code coverage results easier.

# your editor of choice (i use a build of 2.2.6 nano I keep in my personal bin directory)
EDITOR=dex

# gets a list of all source files in the directory
# "2>" just redirects errors but not regular output
# "-1" tells ls to print one file name per line
SOURCEFILES=`ls -1 *.c *.cc *.cpp 2> /dev/null`

# make sure we have an up-to-date build of the project
dialog --infobox "Running make." 3 17
make &> /dev/null

# only continue if make reports no problems
if [ $? -eq 0 ]
then

	# if the file .codecoverage exists, then we will run the commands in the file
	# otherwise, we'll ask the user what executables thon wants to run
	if [ -f .codecoveragecmds ]
	then
		dialog --infobox "Building coverage data." 3 26
		# try to run every command in the file
		while read CMD; do
			$CMD &> /dev/null

			# notify the user if one of the files reported an error
			if [ $? -ne 0 ]
			then
				dialog --yesno "A program didn't exit cleanly:\n$CMD\n\nDo you wish to continue?" 9 35
				if [ $? -eq 1]
				then
					clear
					exit
				fi
			fi
		done < .codecoveragecmds
	else
		# get the names of all executable files
		EXECUTABLES=`find . -type f -perm -u=x,g=x,o=x -print`

		# build the options array
		WIDTH=0
		for FILE in $EXECUTABLES
		do
			# if the file name is the longest yet, record the length
			if [ ${#FILE} -gt $MAX ]
			then
				MAX=${#FILE}
			fi

			# add an item for this file to the array
			# dialog checklists rows are: Tag Item Status
			LIST+=("$FILE" "" "on")
		done

		# make sure the dialog is a minum width
		if [ $WIDTH -lt 50 ]
		then
			WIDTH=50
		fi

		LISTHEIGHT=$((${#LIST[@]}/3)) # the array has 3 items that correspond to a single row
		HEIGHT=$(($LISTHEIGHT+9))

		# prompt the user, saving the resulting choices
		CHOICES=`dialog --stdout --separate-output --cancel-label "Exit" --checklist "Which executables do you wish to run for coverage results?" $HEIGHT $WIDTH $LISTHEIGHT "${LIST[@]}"`
		if [ $? -eq 1 ]
		then
			# the user selected exit
			clear
			exit 0
		fi

		# Now, of the choices, ask which need command line arugments

		for CMD in $CHOICES
		do
			# first ask for command line arguments
			ARGS=`dialog --stdout --no-cancel --ok-label "Run" --inputbox "Arguments for $CMD:" 8 50`
			dialog --infobox "Running $CMD" 3 25
			$CMD $ARGS &> \dev\null

			# notify the user if command didn't exit cleanly
			if [ $? -ne 0 ]
			then
				dialog --yesno "A program didn't exit cleanly:\n$CMD $ARGS\n\nDo you wish to continue?" 9 35
				if [ $? -eq 1 ]
				then
					clear
					exit
				fi
			fi
		done
			
	fi

	# getting the summaries can take a while, let the use know whats going on
	dialog --infobox "Building coverage summary." 3 30

	# build the menu options
	LIST=()
	for FILE in $SOURCEFILES
	do
		# this long chain extracts the coverage percentage of a file
		PERCENTAGE=`gcov "$FILE" | grep -A 1 -m 1 "$FILE" | grep "Lines executed" | cut -d':' -f 2 | cut -d' ' -f 1`
		LIST+=("$FILE" "$PERCENTAGE")
	done

	LISTHEIGHT=$((${#LIST[@]}/2)) # the array has 2 items that correspond to a single row
	HEIGHT=$(($LISTHEIGHT+9))
	WIDTH=50
	
	# let the user view the code coverage details
	# keep presenting the menu until Exit is selected
	RES=0
	while [ $RES -ne 1 ]
	do
		CHOICE=`dialog --stdout --cancel-label "Exit" --menu "View details of which file?" $HEIGHT $WIDTH $LISTHEIGHT "${LIST[@]}"`
		RES=$?

		if [ "$CHOICE" != "" ]
		then
			# Only show details if there is a FILE.gcov file
			if [ -f "$CHOICE.gcov" ]
			then
				dialog --title "$CHOICE coverage details" --textbox "$CHOICE.gcov" 200 200
			else
				dialog --msgbox "There are no coverage details for $CHOICE" 5 50
			fi
		fi
	done
		
else
	dialog --msgbox "Make encountered errors." 5 30
fi

clear
